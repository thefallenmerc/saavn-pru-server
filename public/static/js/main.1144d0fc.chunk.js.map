{"version":3,"sources":["config/endpoints.js","App.js","serviceWorker.js","index.js"],"names":["Endpoints","search","query","baseURL","MusicPlayer","song","className","autoPlay","src","media_url","controls","SuggestionTile","suggestion","playSong","title","onClick","image","album","singers","App","useState","setSong","setQuery","suggestions","setSuggestions","recent","setRecent","findIndex","r","id","localStorage","setItem","JSON","stringify","useEffect","recentFromLocal","getItem","parsed","parse","Array","isArray","err","debounceQuery","useCallback","debounce","value","axios","get","then","response","data","placeholder","onChange","event","target","trim","cancel","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+PAMeA,EAJG,CACdC,OAAQ,SAAAC,GAAK,MAAIC,0CAA6BD,ICsElD,SAASE,EAAT,GAAgC,IAATC,EAAQ,EAARA,KACrB,OAAKA,EAIH,2BAAOC,UAAU,wCAAwCC,UAAQ,EAACC,IAAKH,EAAKI,UAAWC,UAAQ,IAHxF,uDAOX,SAASC,EAAT,GAAmD,IAAzBC,EAAwB,EAAxBA,WAAYC,EAAY,EAAZA,SACpC,OACE,yBAAKP,UAAU,yEAAyEQ,MAAO,QAAUF,EAAWP,KAAMU,QAAS,WACjIF,EAASD,KAET,yBAAKJ,IAAKI,EAAWI,MAAOV,UAAU,kCACtC,yBAAKA,UAAU,4CACb,sCAAYM,EAAWP,MACvB,uCAAaO,EAAWK,OACxB,yCAAeL,EAAWM,WAMnBC,MA5Ff,WAAgB,IAAD,EAEWC,mBAAS,MAFpB,mBAENf,EAFM,KAEAgB,EAFA,OAGaD,mBAAS,IAHtB,mBAGNlB,EAHM,KAGCoB,EAHD,OAIyBF,mBAAS,IAJlC,mBAING,EAJM,KAIOC,EAJP,OAKeJ,mBAAS,IALxB,mBAKNK,EALM,KAKEC,EALF,KAOPb,EAAW,SAAAR,GAEf,IAAiD,IAA7CoB,EAAOE,WAAU,SAAAC,GAAC,OAAIA,EAAEC,KAAOxB,EAAKwB,MAAY,CAClD,IAAMD,EAAC,CAAIvB,GAAJ,mBAAaoB,IACpBC,EAAUE,GACVE,aAAaC,QAAQ,eAAgBC,KAAKC,UAAUL,IAEtDP,EAAQhB,IAGV6B,qBAAU,WACR,IAAMC,EAAkBL,aAAaM,QAAQ,gBAC7C,GAAGD,EACD,IACE,IAAME,EAASL,KAAKM,MAAMH,GACvBI,MAAMC,QAAQH,IACfX,EAAUW,GAEZ,MAAOI,OAEV,IAEH,IAAMC,EAAgBC,sBAAYC,KAAS,SAAAC,GAEzCC,IAAMC,IAAI/C,EAAUC,OAAO4C,IACxBG,MAAK,SAAAC,GACJzB,EAAeyB,EAASC,WAE3B,KAAO,IAEV,OACE,yBAAK5C,UAAU,wBACb,yBAAKA,UAAU,iCACb,2BAAOuC,MAAO3C,EACZI,UAAU,wCACV6C,YAAY,YACZC,SAAU,SAAAC,GAAU,IACVR,EAAUQ,EAAMC,OAAhBT,MACRvB,EAASuB,GACLA,EAAMU,OACRb,EAAcG,GAGdH,EAAcc,YAIlBjC,EAAYkC,KAAI,SAAA7C,GAAU,OAAI,kBAACD,EAAD,CAAgBC,WAAYA,EAAYC,SAAUA,EAAU6C,IAAK9C,EAAWiB,SAG9G,kBAACzB,EAAD,CAAaC,KAAMA,IACnB,yBAAKC,UAAU,iCACb,yBAAKA,UAAU,8CAAf,gBAEEmB,EAAOgC,KAAI,SAAA7C,GAAU,OAAI,kBAACD,EAAD,CAAgBC,WAAYA,EAAYC,SAAUA,EAAU6C,IAAK9C,EAAWiB,WCtD3F8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1144d0fc.chunk.js","sourcesContent":["const baseURL = \"http://localhost:3100/api\";\n\nconst Endpoints = {\n    search: query => baseURL + \"/search?query=\" + query\n}\n\nexport default Endpoints;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport debounce from 'lodash/debounce';\nimport axios from 'axios';\nimport Endpoints from './config/endpoints';\n\nfunction App() {\n\n  const [song, setSong] = useState(null);\n  const [query, setQuery] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n  const [recent, setRecent] = useState([]);\n\n  const playSong = song => {\n    // add to recent if not there\n    if (recent.findIndex(r => r.id === song.id) === -1) {\n      const r = [song, ...recent];\n      setRecent(r);\n      localStorage.setItem('recent-songs', JSON.stringify(r));\n    }\n    setSong(song);\n  }\n\n  useEffect(()=> {\n    const recentFromLocal = localStorage.getItem('recent-songs');\n    if(recentFromLocal) {\n      try {\n        const parsed = JSON.parse(recentFromLocal);\n        if(Array.isArray(parsed)) {\n          setRecent(parsed);\n        }\n      } catch (err) { }\n    }\n  }, []);\n\n  const debounceQuery = useCallback(debounce(value => {\n    // Search\n    axios.get(Endpoints.search(value))\n      .then(response => {\n        setSuggestions(response.data);\n      })\n  }, 1000), []);\n\n  return (\n    <div className=\"flex justify-between\">\n      <div className=\"p-2 w-64 h-screen bg-gray-200\">\n        <input value={query}\n          className=\"border rounded py-1 px-2 block w-full\"\n          placeholder=\"Search...\"\n          onChange={event => {\n            const { value } = event.target;\n            setQuery(value);\n            if (value.trim()) {\n              debounceQuery(value);\n            } else {\n              // not show any random suggestion on clearing search field\n              debounceQuery.cancel();\n            }\n          }} />\n        {\n          suggestions.map(suggestion => <SuggestionTile suggestion={suggestion} playSong={playSong} key={suggestion.id} />)\n        }\n      </div>\n      <MusicPlayer song={song} />\n      <div className=\"p-2 w-64 h-screen bg-gray-200\">\n        <div className=\"py-1 px-2 block w-full uppercase font-bold\">Recent Plays</div>\n        {\n          recent.map(suggestion => <SuggestionTile suggestion={suggestion} playSong={playSong} key={suggestion.id} />)\n        }\n      </div>\n    </div>\n  );\n}\n\nfunction MusicPlayer({ song }) {\n  if (!song) {\n    return <span>Please choose a song!</span>;\n  }\n  return (\n    <audio className=\"hover:outline-none focus:outline-none\" autoPlay src={song.media_url} controls />\n  )\n}\n\nfunction SuggestionTile({ suggestion, playSong }) {\n  return (\n    <div className=\"px-2 py-2 shadow rounded my-2 mx-1 flex cursor-pointer hover:shadow-lg\" title={\"Play \" + suggestion.song} onClick={() => {\n      playSong(suggestion);\n    }}>\n      <img src={suggestion.image} className=\"rounded-full w-12 h-12 border\" />\n      <div className=\"flex-grow text-gray-800 text-xs truncate\">\n        <div>Song: {suggestion.song}</div>\n        <div>Album: {suggestion.album}</div>\n        <div>Singers: {suggestion.singers}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}